/*************************************************************************
Line3D.cpp
三维线段类的具体实现
zheng-y23 2024-7-28
*************************************************************************/

#include "Line3D.hpp"
#include "Point3D.hpp"
#include <math.h>

/*************************************************************************
Line3D
默认构造函数
无参数
无返回值
zheng-y23 2024-7-28
*************************************************************************/
Line3D::Line3D() :Element3D() {
    //空函数体
}

/*************************************************************************
Line3D
构造函数
点集合Points
无返回值
zheng-y23 2024-7-28
*************************************************************************/
Line3D::Line3D(CountFixedSet<Point3D> Points) : Element3D(Points) {
    //空函数体
    std::cout << "Line Constructing" << std::endl;
    std::cout << "In Line: " << Points[0].X << std::endl;
    std::cout << "Line Constructed" << std::endl;
}

/*************************************************************************
Line3D
拷贝构造函数
Line3D类型常引用Source
无返回值
zheng-y23 2024-7-28
*************************************************************************/
Line3D::Line3D(const Line3D& Source) : Element3D(Source) {
    //空函数体
}

/*************************************************************************
~Line3D
析构函数
无参数
无返回值
zheng-y23 2024-7-28
*************************************************************************/
Line3D::~Line3D() {
    //空函数体
}

/*************************************************************************
GetArea
获取面积
无参数
线段面积为零
zheng-y23 2024-7-28
*************************************************************************/
double Line3D::GetArea() const {
    return 0;
}

/*************************************************************************
GetLength
获取线段长度
无参数
返回线段长度
zheng-y23 2024-7-28
*************************************************************************/
double Line3D::GetLength() const {
    double Result = 0;
    Result += std::pow(Element3D::GetPoint(0).X - Element3D::GetPoint(1).X, 2) + pow(Element3D::GetPoint(0).Y - Element3D::GetPoint(1).Y, 2) + pow(Element3D::GetPoint(0).Z - Element3D::GetPoint(1).Z, 2);
    return std::sqrt(Result);
}
